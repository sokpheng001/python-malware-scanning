from fastapi import FastAPI, File, UploadFile, Depends
from fastapi.responses import JSONResponse
from dotenv import load_dotenv
from sqlalchemy.orm import sessionmaker, Session
import os
from database import engine
import models
import uuid
import mapstruct

# Generate a random UUID
random_uuid = uuid.uuid4()

load_dotenv()
app = FastAPI()
# 3. Create a SQLAlchemy Session class
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

API_VERSION = os.getenv("API_VERSION")


# 7. Dependency to get DB session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


@app.get("/")
async def root():
    return {"message": "Hello World"}


@app.get("/hello/{name}")
async def say_hello(name: str):
    return {"message": f"Hello {name}"}


@app.post(f"{API_VERSION}/feature-create")
def create_feature(feature_name: str, description: str, db: Session = Depends(get_db)):
    db_item = models.Feature(uuid=random_uuid, feature_name=feature_name, description=description)
    db.add(db_item)
    db.commit()
    db.refresh(db_item)
    return mapstruct.map_from_feature_to_feature_dto(db_item)


@app.get(f"{API_VERSION}/features")
def get_all_features(db: Session = Depends(get_db)):
    return db.query(models.Feature).all()


@app.post(f"{API_VERSION}/file-upload")
async def upload_file(file: UploadFile = File()):
    # Save the uploaded file
    # with open(file.filename, "wb") as buffer:
    #     buffer.write(await file.read())
    return JSONResponse(content={"message": f"{file.filename}"})


# Define a main method to run the FastAPI application
if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
